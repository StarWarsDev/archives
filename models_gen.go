// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package main

import (
	"fmt"
	"io"
	"strconv"
)

type AttackDice struct {
	Red   *int `json:"red"`
	Black *int `json:"black"`
	White *int `json:"white"`
}

type Surge struct {
	Attack  *AttackSurge  `json:"attack"`
	Defense *DefenseSurge `json:"defense"`
}

type Unit struct {
	ID           string      `json:"id"`
	Name         string      `json:"name"`
	Subtitle     *string     `json:"subtitle"`
	Unique       *bool       `json:"unique"`
	Side         Side        `json:"side"`
	Type         UnitType    `json:"type"`
	Points       int         `json:"points"`
	Rank         Rank        `json:"rank"`
	Minis        int         `json:"minis"`
	Wounds       int         `json:"wounds"`
	Courage      *int        `json:"courage"`
	Resilience   *int        `json:"resilience"`
	Defense      DefenseDice `json:"defense"`
	Surge        *Surge      `json:"surge"`
	Speed        int         `json:"speed"`
	Slots        []*Slot     `json:"slots"`
	Keywords     []*string   `json:"keywords"`
	Weapons      []*Weapon   `json:"weapons"`
	CommandCards []*string   `json:"commandCards"`
}

type Weapon struct {
	Name     *string      `json:"name"`
	Range    *WeaponRange `json:"range"`
	Dice     *AttackDice  `json:"dice"`
	Keywords []*string    `json:"keywords"`
}

type WeaponRange struct {
	From int  `json:"from"`
	To   *int `json:"to"`
}

type AttackSurge string

const (
	AttackSurgeHit  AttackSurge = "HIT"
	AttackSurgeCrit AttackSurge = "CRIT"
)

var AllAttackSurge = []AttackSurge{
	AttackSurgeHit,
	AttackSurgeCrit,
}

func (e AttackSurge) IsValid() bool {
	switch e {
	case AttackSurgeHit, AttackSurgeCrit:
		return true
	}
	return false
}

func (e AttackSurge) String() string {
	return string(e)
}

func (e *AttackSurge) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AttackSurge(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AttackSurge", str)
	}
	return nil
}

func (e AttackSurge) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DefenseDice string

const (
	DefenseDiceRed   DefenseDice = "RED"
	DefenseDiceWhite DefenseDice = "WHITE"
)

var AllDefenseDice = []DefenseDice{
	DefenseDiceRed,
	DefenseDiceWhite,
}

func (e DefenseDice) IsValid() bool {
	switch e {
	case DefenseDiceRed, DefenseDiceWhite:
		return true
	}
	return false
}

func (e DefenseDice) String() string {
	return string(e)
}

func (e *DefenseDice) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DefenseDice(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DefenseDice", str)
	}
	return nil
}

func (e DefenseDice) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DefenseSurge string

const (
	DefenseSurgeBlock DefenseSurge = "BLOCK"
)

var AllDefenseSurge = []DefenseSurge{
	DefenseSurgeBlock,
}

func (e DefenseSurge) IsValid() bool {
	switch e {
	case DefenseSurgeBlock:
		return true
	}
	return false
}

func (e DefenseSurge) String() string {
	return string(e)
}

func (e *DefenseSurge) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DefenseSurge(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DefenseSurge", str)
	}
	return nil
}

func (e DefenseSurge) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Rank string

const (
	RankCommander     Rank = "COMMANDER"
	RankOperative     Rank = "OPERATIVE"
	RankCorps         Rank = "CORPS"
	RankSpecialForces Rank = "SPECIAL_FORCES"
	RankSupport       Rank = "SUPPORT"
	RankHeavy         Rank = "HEAVY"
)

var AllRank = []Rank{
	RankCommander,
	RankOperative,
	RankCorps,
	RankSpecialForces,
	RankSupport,
	RankHeavy,
}

func (e Rank) IsValid() bool {
	switch e {
	case RankCommander, RankOperative, RankCorps, RankSpecialForces, RankSupport, RankHeavy:
		return true
	}
	return false
}

func (e Rank) String() string {
	return string(e)
}

func (e *Rank) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Rank(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Rank", str)
	}
	return nil
}

func (e Rank) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Side string

const (
	SideLight Side = "LIGHT"
	SideDark  Side = "DARK"
)

var AllSide = []Side{
	SideLight,
	SideDark,
}

func (e Side) IsValid() bool {
	switch e {
	case SideLight, SideDark:
		return true
	}
	return false
}

func (e Side) String() string {
	return string(e)
}

func (e *Side) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Side(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Side", str)
	}
	return nil
}

func (e Side) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Slot string

const (
	SlotArmament    Slot = "ARMAMENT"
	SlotHeavyWeapon Slot = "HEAVY_WEAPON"
	SlotPersonnel   Slot = "PERSONNEL"
	SlotForce       Slot = "FORCE"
	SlotCommand     Slot = "COMMAND"
	SlotHardpoint   Slot = "HARDPOINT"
	SlotGear        Slot = "GEAR"
	SlotGrenades    Slot = "GRENADES"
	SlotComms       Slot = "COMMS"
	SlotPilot       Slot = "PILOT"
	SlotTraining    Slot = "TRAINING"
	SlotGenerator   Slot = "GENERATOR"
	SlotCrew        Slot = "CREW"
)

var AllSlot = []Slot{
	SlotArmament,
	SlotHeavyWeapon,
	SlotPersonnel,
	SlotForce,
	SlotCommand,
	SlotHardpoint,
	SlotGear,
	SlotGrenades,
	SlotComms,
	SlotPilot,
	SlotTraining,
	SlotGenerator,
	SlotCrew,
}

func (e Slot) IsValid() bool {
	switch e {
	case SlotArmament, SlotHeavyWeapon, SlotPersonnel, SlotForce, SlotCommand, SlotHardpoint, SlotGear, SlotGrenades, SlotComms, SlotPilot, SlotTraining, SlotGenerator, SlotCrew:
		return true
	}
	return false
}

func (e Slot) String() string {
	return string(e)
}

func (e *Slot) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Slot(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Slot", str)
	}
	return nil
}

func (e Slot) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UnitType string

const (
	UnitTypeTrooper            UnitType = "TROOPER"
	UnitTypeEmplacementTrooper UnitType = "EMPLACEMENT_TROOPER"
	UnitTypeCreatureTrooper    UnitType = "CREATURE_TROOPER"
	UnitTypeVehicle            UnitType = "VEHICLE"
)

var AllUnitType = []UnitType{
	UnitTypeTrooper,
	UnitTypeEmplacementTrooper,
	UnitTypeCreatureTrooper,
	UnitTypeVehicle,
}

func (e UnitType) IsValid() bool {
	switch e {
	case UnitTypeTrooper, UnitTypeEmplacementTrooper, UnitTypeCreatureTrooper, UnitTypeVehicle:
		return true
	}
	return false
}

func (e UnitType) String() string {
	return string(e)
}

func (e *UnitType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UnitType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UnitType", str)
	}
	return nil
}

func (e UnitType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
